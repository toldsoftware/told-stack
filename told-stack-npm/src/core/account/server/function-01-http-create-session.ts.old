import { buildFunction_http, build_runFunction_http, build_createFunctionJson, build_binding } from "../../../core/azure-functions/function-builder";
import { FunctionTemplateConfig, ServerConfigType, sessionTokenTrigger } from "../config/server-config";
import { SessionTable } from "../config/types";
import { createUserId_anonymous_server } from "../config/session-user-id";

function buildFunction(config: FunctionTemplateConfig) {
    return buildFunction_http<{ userId: string } | { error: string }, typeof sessionTokenTrigger>({
        route: config.getBinding_http(sessionTokenTrigger).route
    })
        .bindings(t => ({
            inSessionTable: build_binding<SessionTable>(config.getBinding_SessionTable(t)),
            outSessionTable: build_binding<SessionTable>(config.getBinding_SessionTable(t)),
        }));
}

export const createFunctionJson = (config: FunctionTemplateConfig) => build_createFunctionJson(config, buildFunction);

export const runFunction = build_runFunction_http(buildFunction, (config: ServerConfigType, context, req) => {
    context.log('START');

    // What is the point of this?
    // The userId only has value for an authenticated user
    // For anonymous users, an anon user id doesn't mean much since the session Id is sufficient to id unique anonymous user

    // It does provide a way to verify no session collisions by confirming that a unique session exists,
    // But for that purpose, the sessionToken could just be generated server side with less friction

    // So this is better termed a sessionVerifier since it does not identify the user
    // But it would be simpler to generate a sessionToken server side and eliminate the need for this

    // Why generate session id server side:
    // - Verify Unique
    // - Record Existance of each session upon creation

    // Why generate session id client side:
    // - Less Server Resources
    // - No Empty Sessions
    // - Less DDoS Attack Surface
    // - Server side generation does not prevent session guessing
    // - Session is immediately ready and requires no wait time
    // - Login Association with UserId is same either way

    if (context.bindings.inSessionTable) {
        context.res = {
            body: {
                error: 'Session Already Exists'
            },
            headers: {
                'Content-Type': 'application/json',
            }
        };

        context.log('DONE');
        context.done();
        return;
    }

    const userId = createUserId_anonymous_server();

    context.bindings.outSessionTable = {
        sessionToken: context.bindingData.sessionToken,
        userId,
        isAnonymous: true,
    };

    context.res = {
        body: {
            userId,
        },
        headers: {
            'Content-Type': 'application/json',
        }
    };

    context.log('DONE');
    context.done();
});