import { FunctionDefinitionBase, FunctionExtension } from "../../azure-functions/function-base";
import { AccountServerConfig } from "../config/server-config";
import { createUserId_server } from "../config/account-ids";
import { Function as Function_SessionCreate, FunctionDefinition as FunctionDefinition_SessionCreate } from "./extension-session-create";
import { AccountPermission } from "../config/types";

export class FunctionDefinition extends FunctionDefinitionBase {
    constructor(private config: AccountServerConfig) {
        super();
    }

    outAccountTable = this.config.binding_accountTable_out;
    
    private _extSessionCreate = new FunctionDefinition_SessionCreate(this.config);
    outSessionTable = this._extSessionCreate.outSessionTable;
}

export class Function extends FunctionExtension<FunctionDefinition>{
    constructor(private config: AccountServerConfig) {
        super();
    }

    private _extSessionCreate = new Function_SessionCreate(this.config);

    createNewUser = this.buildMethod((context) => (oldSessionToken?: string) => {
        const userId = createUserId_server();

        context.bindings.outAccountTable = {
            PartitionKey: userId,
            RowKey: 'user',
            userId: userId,
            usageCount: 0,
        };

        return this._extSessionCreate.createNewSession(context)(userId, [AccountPermission.SetCredentials], [], oldSessionToken);
    });
}